" =======================================================================
" Vundle setup and initialization. This needs
" to be done before any configuration so all

" plugins are loaded.

set nocompatible                    " required for Vundle
filetype off                        " required for Vundle, enabled later.

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

" Syntastic - show me when I screw up code syntax
Bundle 'scrooloose/syntastic'
" Bufferline - show open buffer names in statusbar
Bundle 'bling/vim-bufferline'
" Airline - like powerline, but with more power
Bundle 'bling/vim-airline'
" Fuzzy file finding (Control-P)
Bundle 'kien/ctrlp.vim'
" Auto tag closing for HTML, XML, etc.
Bundle 'docunext/closetag.vim'
" Jump around documents like it's your J.O.B.
Bundle 'Lokaltog/vim-easymotion'
" Multiple cursor support a-la sublime
Bundle 'terryma/vim-multiple-cursors'
" Multifile grep search and replace support
Bundle 'vim-scripts/EasyGrep'
" Ninja Ruby support
Bundle 'vim-ruby/vim-ruby'
" Judo Rails support
Bundle 'tpope/vim-rails'
" Matchit to let % match method start ends, tags, etc.
Bundle 'vim-scripts/matchit.zip'
" Bundler support
Bundle 'tpope/vim-bundler'
" Cucumber support
Bundle 'tpope/vim-cucumber'
" Add appropriate keywords after if, do, etc.
Bundle 'tpope/vim-endwise'
" Comment / uncomment
Bundle 'tpope/vim-commentary'
" Git support in vim
Bundle 'tpope/vim-fugitive'
" Evernote support - Note you'll need to install this: https://pypi.python.org/pypi/Markdown
Bundle 'kakkyz81/evervim'
" Tree browsing goodness
Bundle 'scrooloose/nerdtree'
" Add surround support to surround text with stuff.
Bundle 'tpope/vim-surround'
" Docuwiki editing support
Bundle 'nblock/vim-dokuwiki'
" Clojure dynamic evaluation support
Bundle 'tpope/vim-fireplace'
" Clojure syntax highlighting
Bundle 'guns/vim-clojure-static'
" Textmate Snippet Support
Bundle 'vim-scripts/UltiSnips'
" Awesome character alignment
Bundle 'godlygeek/tabular'
" Vim + tmux integration
Bundle "benmills/vimux"
" Applescript syntax highlighting.
Bundle "vim-scripts/applescript.vim"
" Run ruby tests through vimux
Bundle 'skalnik/vim-vroom'
" Support a scratch buffer
Bundle 'duff/vim-scratch'
" Rainbow parenthesis goodness for clojure
Bundle 'kien/rainbow_parentheses.vim'
" Markdown support
Bundle 'plasticboy/vim-markdown'

" =======================================================================
" Actual vim configuration goes here.
" =======================================================================

syntax on                           "lots of syntax highlighting
set nocompatible                    "be iMproved
colorscheme solarized
set background=dark                 "assume we're on a dark background for solarized colors
let g:solarized_termcolors=256      "assume we're on a dark background for colors

" General Preferences
set incsearch                       "search as you type
set hlsearch                        "highlight the search
set ignorecase                      "ignore case...
set smartcase                       "unless the search uses uppercase letters
set gdefault                        "apply substitutions globally (whole line) by default
set wildmode=longest:full,list:full "make filename completion like the terminal...
set wildmenu                        "and enable the tab-completion menu
set wildignore=*.bak,*.tmp,*.sw[pno]
set whichwrap=b,s,h,l,<,>,~,[,]     "moving left and right will wrap around to next/prev line
set backspace=indent,eol,start      "backspace will delete whatever is behind your cursor and wrap
set visualbell                      "turn off the audible beep
set modeline                        "let files give hints for syntax and whatnot
set showcmd                         "display partial commands
set showmatch                       "show matching brackets briefly
set scrolloff=8                     "leave a little context around the current line when scrolling.
set title                           "set the title to be the name of the file we're editing.
set splitright                      "put the new window on the right when vertically splitting
set splitbelow                      "put the new window on the bottom when horizontally splitting
set showcmd                         "show partial commands in the status bar
set nobackup                        "don't create backup files
set number                          "show line numbers
set list                            "show special characters
set listchars=tab:»\ ,trail:·,extends:▸ "set custom tab, wrap, and end of line characters
let mapleader=","                   "change the leader key to be ',' to make it easier to hit.

" MacVim gui specific settings
if has('gui_running')
  set t_Co=256                      "our terminal supports 256 colors
  set guioptions=egmrt              "hide the gui menubar
  "set noantialias                  "turn off antialiasing - it makes things look really blurry.
  set guifont=Inconsolata\ XL:h12,Inconsolata:h12,Monaco:h12 "set fonts for gui vim
endif

" Add window switching support using Control-hjklq
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l
nnoremap <C-Q> <C-W>q

" Make jk behave like you'd expect with wrapped lines
nnoremap j gj
nnoremap k gk

" Highlight extra space at the end of lines, etc...
"highlight RedundantWhitespace ctermbg=red guibg=darkred
"match RedundantWhitespace /\s\+$\|\t/

" Quick buffer switching with TAB, even with edited files
set hidden                          "Let me switch buffers even with modifications
nmap <C-TAB> :bn<CR>
nmap <C-S-TAB> :bp<CR>
set autoread                        "auto-reload files, if there's no conflict

" Indentation Stuff
set expandtab                       "use spaces, not tabs
set softtabstop=2 shiftwidth=2      "2-space indents
set shiftround                      "always use a multiple of 4 for indents
set smarttab                        "backspace to remove space-indents
set autoindent                      "auto-indent for code blocks
"DONT USE: smartindent              "it does stupid things with comments

"smart indenting by filetype, better than smartindent and required for vundle
filetype on
filetype indent on
filetype plugin on

" UltiSnip bindings
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Airline Configuration
set nocompatible                    " Disable vi-compatibility
set laststatus=2                    " Always show the statusline
set encoding=utf-8                  " Necessary to show Unicode glyphs

" I use the older powerline fonts so we need to define the symbols here.
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_powerline_fonts = 1   " Use custom powerline fonts.
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'

" Restrict closetag to certain filetypes
autocmd FileType html,htmldjango,jinjahtml,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,mako source ~/.vim/bundle/closetag.vim/plugin/closetag.vim

" Don't continue comments on any filetype.  I'll retype the comment character if I need it.
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Enable RainbowParenthesis by default
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" ------------------------------------------------------
"  Some convenient key configs...
" Map . to jump back to where editing started after repeating the last command.
nmap . .`[

" Some Ctrl-P goodness from http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>f :CtrlP %%<cr>
map <leader>b :CtrlPBuffer<cr>
let g:ctrlp_cmd = 'CtrlPMixed'      "search anything (files, buffers, and MRU files)
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_root_markers = ['.git', 'tags']

" Some convenient tabularize mappings
nmap <leader>a= :Tabularize /=<cr>
vmap <leader>a= :Tabularize /=<cr>
nmap <leader>a<bar> :Tabularize /<bar><cr>
vmap <leader>a<bar> :Tabularize /<bar><cr>
nmap <leader>a: :Tabularize /:\zs<cr>
vmap <leader>a: :Tabularize /:\zs<cr>
nmap <leader>a> :Tabularize /=><cr>
vmap <leader>a> :Tabularize /=><cr>

" Magic HTML to JS converters from Single Page Web Apps Book
vmap <silent> ;h :s?^\(\s*\)+ '\([^']\+\)',*\s*$?\1\2?g<CR>
vmap <silent> ;q :s?^\(\s*\)\(.*\)\s*$? \1 + '\2'?<CR>

" Some nice vimux integration
map <leader>vp :VimuxPromptCommand<cr>
map <leader>vl :VimuxRunLastCommand<cr>

" Bring up NERDTree
map <leader>nt :NERDTreeToggle<cr>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" Enable docuwiki syntax for the current buffer
map <leader>dw :set ft=dokuwiki<cr>

" Shortcut for Gstatus
map <leader>gs :Gstatus<cr>

" Setup some commands for formatting HTML and XML
command Txml set ft=xml | execute "%!tidy -q -i -xml"
command Thtml set ft=html | execute "%!tidy -q -i -html"

" clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

" ==============================================
" Load any private configuration
if filereadable(glob("~/.vimrc.private"))
    source ~/.vimrc.private
endif
