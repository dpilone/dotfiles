" =======================================================================
" Vundle setup and initialization. This needs
" to be done before any configuration so all

" plugins are loaded.

set nocompatible                    " required for Vundle
filetype off                        " required for Vundle, enabled later.

" Some vim plugins (reasonably) assume a POSIX shell, which fish isn't.
" If we're running vim from fish, tell vim to use bash instead.
if &shell =~# 'fish$'
    set shell=bash
endif

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" Super duper completion with YouCompleteMe
Plugin 'Valloric/YouCompleteMe'
" Syntastic - show me when I screw up code syntax
Plugin 'scrooloose/syntastic'
" Bufferline - show open buffer names in statusbar
Plugin 'bling/vim-bufferline'
" Airline - like powerline, but with more power
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Fuzzy file finding (Control-P)
Plugin 'kien/ctrlp.vim'
" Auto tag closing for HTML, XML, etc.
Plugin 'docunext/closetag.vim'
" Jump around documents like it's your J.O.B.
Plugin 'Lokaltog/vim-easymotion'
" Multiple cursor support a-la sublime
Plugin 'terryma/vim-multiple-cursors'
" Multifile grep search and replace support
Plugin 'vim-scripts/EasyGrep'
" Ninja Ruby support
Plugin 'vim-ruby/vim-ruby'
" Judo Rails support
Plugin 'tpope/vim-rails'
" Matchit to let % match method start ends, tags, etc.
Plugin 'vim-scripts/matchit.zip'
" Pluginr support
Plugin 'tpope/vim-bundler'
" Cucumber support
Plugin 'tpope/vim-cucumber'
" Add appropriate keywords after if, do, etc.
Plugin 'tpope/vim-endwise'
" Comment / uncomment
Plugin 'tpope/vim-commentary'
" Git support in vim
Plugin 'tpope/vim-fugitive'
" Tree browsing goodness
Plugin 'scrooloose/nerdtree'
" Add surround support to surround text with stuff.
Plugin 'tpope/vim-surround'
" Open up repeate (.) for plugins
Plugin 'tpope/vim-repeat'
" Docuwiki editing support
Plugin 'nblock/vim-dokuwiki'
" Clojure dynamic evaluation support
Plugin 'tpope/vim-fireplace'
" Clojure syntax highlighting
Plugin 'guns/vim-clojure-static'
" Enhanced Clojure highlighting
Plugin 'guns/vim-clojure-highlight'
" S-Expression Support for Clojure
Plugin 'guns/vim-sexp'
" Human bindings for S-Expression
Plugin 'tpope/vim-sexp-mappings-for-regular-people'
" Clojure linting with Eastwood
Plugin 'venantius/vim-eastwood'
" Textmate Snippet Support
Plugin 'SirVer/ultisnips'
" Actual snippets
Plugin 'honza/vim-snippets'
" Awesome character alignment
Plugin 'godlygeek/tabular'
" Vim + tmux navigation.  Also sets up the pane navigation bindings
Plugin 'christoomey/vim-tmux-navigator'
" Vim + tmux integration
Plugin 'benmills/vimux'
" Applescript syntax highlighting.
Plugin 'vim-scripts/applescript.vim'
" Run ruby tests through vimux
Plugin 'skalnik/vim-vroom'
" Support a scratch buffer
Plugin 'duff/vim-scratch'
" Rainbow parenthesis goodness for clojure
Plugin 'kien/rainbow_parentheses.vim'
" Markdown support
Plugin 'plasticboy/vim-markdown'
" Leiningen Support
Plugin 'tpope/vim-leiningen.git'
" Tagbar class outline viewer
Plugin 'majutsushi/tagbar'
" Needed for vim-easytags
Plugin 'xolox/vim-misc'
" Automated ctags support
Plugin 'xolox/vim-easytags'
" Support to send clojure to a repl
Plugin 'jpalardy/vim-slime'
" Fish shell syntax support
Plugin 'dag/vim-fish'
" So many colors...
Plugin 'flazz/vim-colorschemes'
" TypeScript syntax support
Plugin 'leafgarland/typescript-vim'
" Super JavaScript syntax support
Plugin 'pangloss/vim-javascript'
"Plugin 'othree/yajs.vim', { 'for': 'javascript' }
"Plugin 'mxw/vim-jsx'
" NodeJS support in VIM
Plugin 'moll/vim-node'
" Show indentation prettily
Plugin 'Yggdroot/indentLine'


call vundle#end()


" =======================================================================
" Actual vim configuration goes here.
" =======================================================================

syntax on                           "lots of syntax highlighting
set nocompatible                    "be iMproved
"set background=dark                 "assume we're on a dark background for solarized colors
"let g:solarized_termcolors=256      "assume we're on a dark background for colors

" General Preferences
set clipboard=unnamed               "use system clipboard by default
set incsearch                       "search as you type
set hlsearch                        "highlight the search
set ignorecase                      "ignore case...
set smartcase                       "unless the search uses uppercase letters
set gdefault                        "apply substitutions globally (whole line) by default
set wildmode=longest:full,list:full "make filename completion like the terminal...
set wildmenu                        "and enable the tab-completion menu
set wildignore=*.bak,*.tmp,*.sw[pno]
set whichwrap=b,s,h,l,<,>,~,[,]     "moving left and right will wrap around to next/prev line
set backspace=indent,eol,start      "backspace will delete whatever is behind your cursor and wrap
set visualbell                      "turn off the audible beep
set modeline                        "let files give hints for syntax and whatnot
set cursorline                      "highlight the current line
set showcmd                         "display partial commands
set showmatch                       "show matching brackets briefly
set scrolloff=8                     "leave a little context around the current line when scrolling.
set title                           "set the title to be the name of the file we're editing.
set splitright                      "put the new window on the right when vertically splitting
set splitbelow                      "put the new window on the bottom when horizontally splitting
set showcmd                         "show partial commands in the status bar
set nobackup                        "don't create backup files
set number                          "show line numbers
set list                            "show special characters
set listchars=tab:»\ ,trail:·,extends:▸ "set custom tab, wrap, and end of line characters
let mapleader=","                   "change the leader key to be ',' to make it easier to hit.

" MacVim gui specific settings
if has('gui_running')
  set t_Co=256                      "our terminal supports 256 colors
  set guioptions=egmrt              "hide the gui menubar
  "set noantialias                  "turn off antialiasing - it makes things look really blurry.
  set guifont=Fira\ Mono\ Medium\ for\ Powerline:h12,Monaco:h12 "set fonts for gui vim
endif

" Neovim color support
if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

" Make jk behave like you'd expect with wrapped lines
nnoremap j gj
nnoremap k gk

" indentLine configuration
let g:indentLine_color_term = 239
"let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_color_gui = '#333333'
let g:indentLine_char = '│'

" Customize the rainbow_parens to remove black since I use a black background
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

" Highlight extra space at the end of lines, etc...
"highlight RedundantWhitespace ctermbg=red guibg=darkred
"match RedundantWhitespace /\s\+$\|\t/

" Quick buffer switching with TAB, even with edited files
set hidden                          "Let me switch buffers even with modifications
nmap <C-TAB> :bn<CR>
nmap <C-S-TAB> :bp<CR>
set autoread                        "auto-reload files, if there's no conflict

" Indentation Stuff
set expandtab                       "use spaces, not tabs
set softtabstop=2 shiftwidth=2      "2-space indents
set shiftround                      "always use a multiple of 4 for indents
set smarttab                        "backspace to remove space-indents
set autoindent                      "auto-indent for code blocks
"DONT USE: smartindent              "it does stupid things with comments

"smart indenting by filetype, better than smartindent and required for vundle
filetype on
filetype indent on
filetype plugin on

" UltiSnip bindings
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Airline Configuration
set nocompatible                    " Disable vi-compatibility
set laststatus=2                    " Always show the statusline
set encoding=utf-8                  " Necessary to show Unicode glyphs

let g:airline_powerline_fonts = 1   " Use powerline fonts. I prefer 12pt Fira Mono Medium for Powerline
let g:airline_theme='papercolor'
colorscheme CandyPaper

" Easytag configuration
:set tags=./.tags;
:let g:easytags_dynamic_files = 1

"Vim-Slime Config for tmux
let g:slime_target = "tmux"

" Fish syntax configuration
autocmd FileType fish compiler fish
autocmd FileType fish setlocal textwidth=79

" Restrict closetag to certain filetypes
autocmd FileType html,htmldjango,jinjahtml,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,mako source ~/.vim/bundle/closetag.vim/plugin/closetag.vim

" Don't continue comments on any filetype.  I'll retype the comment character if I need it.
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Enable RainbowParenthesis by default
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" ------------------------------------------------------
"  Some convenient key configs...
" Map . to jump back to where editing started after repeating the last command.
nmap . .`[

" vim-geeknote keybindings
map <leader>gnt :Geeknote<cr>
map <leader>gnc :GeeknoteCreateNote
" Enable markdown support.  Note that this can wreak havoc on some
" notes, so use wisely.
map <leader>gnm let g:GeeknoteFormat="markdown"<cr>


" Some Ctrl-P goodness from http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>f :CtrlP %%<cr>
map <leader>b :CtrlPBuffer<cr>
let g:ctrlp_cmd = 'CtrlPMixed'      "search anything (files, buffers, and MRU files)
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_root_markers = ['.git', 'tags']

" Some convenient tabularize mappings
nmap <leader>a= :Tabularize /=<cr>
vmap <leader>a= :Tabularize /=<cr>
nmap <leader>a<bar> :Tabularize /<bar><cr>
vmap <leader>a<bar> :Tabularize /<bar><cr>
nmap <leader>a: :Tabularize /:\zs<cr>
vmap <leader>a: :Tabularize /:\zs<cr>
nmap <leader>a> :Tabularize /=><cr>
vmap <leader>a> :Tabularize /=><cr>

" Magic HTML to JS converters from Single Page Web Apps Book
vmap <silent> ;h :s?^\(\s*\)+ '\([^']\+\)',*\s*$?\1\2?g<CR>
vmap <silent> ;q :s?^\(\s*\)\(.*\)\s*$? \1 + '\2'?<CR>

" Some nice vimux integration
map <leader>vp :VimuxPromptCommand<cr>
map <leader>vl :VimuxRunLastCommand<cr>

" Bring up NERDTree
map <leader>nt :NERDTreeToggle<cr>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" Enable docuwiki syntax for the current buffer
map <leader>dw :set ft=dokuwiki<cr>

" Shortcut for Gstatus
map <leader>gs :Gstatus<cr>

" iTerm2 Touchbar support
autocmd VimEnter * silent !echo -ne "\033]1337;PushKeyLabels\a"
autocmd VimEnter * silent !echo -ne "\033]1337;SetKeyLabel=F1=Git Status\a"
autocmd VimEnter * map <F1> :Gstatus<CR>
autocmd VimLeave * silent !echo -ne "\033]1337;PopKeyLabels\a"

" Setup some commands for formatting HTML and XML
command Txml set ft=xml | execute "%!tidy -q -i -xml"
command Thtml set ft=html | execute "%!tidy -q -i -html"

" clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

" Don't fold by default in vim-markdown
let g:vim_markdown_folding_disabled=1

" vim-javascript configuration
let g:javascript_enable_domhtmlcss=1
let g:javascript_fold=1

" vim-syntastic configuration
let g:syntastic_javascript_checkers = ['eslint']

" vim-jsx configuration
"let g:jsx_ext_required = 0 " Support JSX in JS files, not just JSX files.

" ==============================================
" Load any private configuration
if filereadable(glob("~/.vimrc.private"))
    source ~/.vimrc.private
endif
