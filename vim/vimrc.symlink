" ==============================================================
" === Plugins come first ===
" ==============================================================

set nocompatible                    " We live in the future.

" Some vim plugins (reasonably) assume a POSIX shell, which fish isn't.
" If we're running vim from fish, tell vim to use bash instead.
if &shell =~# 'fish$'
    set shell=bash
endif

" Automatically fetch vim-plug if we don't have it.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" ==============================================================
" === Vim Lifestyle Plugins ===
" ==============================================================
" Super duper completion with YouCompleteMe
"Plug 'Valloric/YouCompleteMe'
" Super duper completion with vim coc
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Syntastic - show me when I screw up code syntax
Plug 'scrooloose/syntastic'
" Syntastic support for local eslint
Plug 'mtscout6/syntastic-local-eslint.vim'
" Bufferline - show open buffer names in statusbar
Plug 'bling/vim-bufferline'
" Airline - like powerline, but with more power
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Fuzzy file finding (Control-P)
Plug 'ctrlpvim/ctrlp.vim'
" Auto tag closing for HTML, XML, etc.
Plug 'docunext/closetag.vim'
" Jump around documents like it's your J.O.B.
Plug 'Lokaltog/vim-easymotion'
" Multiple cursor support a-la sublime
Plug 'terryma/vim-multiple-cursors'
" Multifile grep search and replace support
Plug 'vim-scripts/EasyGrep'
" Matchit to let % match method start ends, tags, etc.
Plug 'vim-scripts/matchit.zip'
" Add appropriate keywords after if, do, etc.
Plug 'tpope/vim-endwise'
" Comment / uncomment
Plug 'tpope/vim-commentary'
" Git support in vim
Plug 'tpope/vim-fugitive'
" Tree browsing goodness
Plug 'scrooloose/nerdtree'
" Add surround support to surround text with stuff.
Plug 'tpope/vim-surround'
" Open up repeate (.) for plugins
Plug 'tpope/vim-repeat'
" Textmate Snippet Support
"Plug 'SirVer/ultisnips'
" Actual snippets
"Plug 'honza/vim-snippets'
" Awesome character alignment
Plug 'godlygeek/tabular'
" Vim + tmux navigation.  Also sets up the pane navigation bindings
Plug 'christoomey/vim-tmux-navigator'
" Vim + tmux integration
Plug 'benmills/vimux'
" Support a scratch buffer
Plug 'duff/vim-scratch'
" Needed for vim-easytags
Plug 'xolox/vim-misc'
" Automated ctags support
Plug 'xolox/vim-easytags'
" So many colors...
Plug 'flazz/vim-colorschemes'
" Fancy DevIcons for VIM
Plug 'ryanoasis/vim-devicons'
" Show indentation prettily
Plug 'Yggdroot/indentLine'
" Rainbow parenthesis goodness for clojure
Plug 'kien/rainbow_parentheses.vim'

" ==============================================================
" === Javascript support ===
" ==============================================================
" TypeScript syntax support
Plug 'leafgarland/typescript-vim'
" Super JavaScript syntax support
Plug 'pangloss/vim-javascript'
" NodeJS support in VIM
Plug 'moll/vim-node'

" ==============================================================
" === Misc support ===
" ==============================================================
" Markdown support
Plug 'plasticboy/vim-markdown'
" Applescript syntax highlighting.
Plug 'vim-scripts/applescript.vim'

" ==============================================================
" === Clojure support ===
" ==============================================================
" Clojure dynamic evaluation support
"Plug 'tpope/vim-fireplace'
" Clojure syntax highlighting
"Plug 'guns/vim-clojure-static'
" Enhanced Clojure highlighting
"Plug 'guns/vim-clojure-highlight'
" S-Expression Support for Clojure
"Plug 'guns/vim-sexp'
" Human bindings for S-Expression
"Plug 'tpope/vim-sexp-mappings-for-regular-people'
" Clojure linting with Eastwood
"Plug 'venantius/vim-eastwood'
" Support to send clojure to a repl
"Plug 'jpalardy/vim-slime'
" Leiningen Support
"Plug 'tpope/vim-leiningen.git'

" ==============================================================
" === Ruby support ===
" ==============================================================
" Ninja Ruby support
"Plug 'vim-ruby/vim-ruby'
" Judo Rails support
"Plug 'tpope/vim-rails'
" Plugr support
"Plug 'tpope/vim-bundler'
" Cucumber support
"Plug 'tpope/vim-cucumber'
" Run ruby tests through vimux
"Plug 'skalnik/vim-vroom'


call plug#end()


" =======================================================================
" Actual vim configuration goes here.
" =======================================================================

syntax on                           "lots of syntax highlighting
set nocompatible                    "be iMproved
"set background=dark                 "assume we're on a dark background for solarized colors
"let g:solarized_termcolors=256      "assume we're on a dark background for colors

" General Preferences
set clipboard=unnamed               "use system clipboard by default
set incsearch                       "search as you type
set hlsearch                        "highlight the search
set ignorecase                      "ignore case...
set smartcase                       "unless the search uses uppercase letters
set gdefault                        "apply substitutions globally (whole line) by default
set wildmode=longest:full,list:full "make filename completion like the terminal...
set wildmenu                        "and enable the tab-completion menu
set wildignore=*.bak,*.tmp,*.sw[pno]
set whichwrap=b,s,h,l,<,>,~,[,]     "moving left and right will wrap around to next/prev line
set backspace=indent,eol,start      "backspace will delete whatever is behind your cursor and wrap
set visualbell                      "turn off the audible beep
set modeline                        "let files give hints for syntax and whatnot
set cursorline                      "highlight the current line
set showmatch                       "show matching brackets briefly
set scrolloff=8                     "leave a little context around the current line when scrolling.
set title                           "set the title to be the name of the file we're editing.
set splitright                      "put the new window on the right when vertically splitting
set splitbelow                      "put the new window on the bottom when horizontally splitting
set showcmd                         "show partial commands in the status bar
set nobackup                        "don't create backup files
set noswapfile                      "don't create swap files
set number                          "show line numbers
set list                            "show special characters
set listchars=tab:»\ ,trail:·,extends:▸ "set custom tab, wrap, and end of line characters
let mapleader=","                   "change the leader key to be ',' to make it easier to hit.

" MacVim gui specific settings
if has('gui_running')
  set t_Co=256                      "our terminal supports 256 colors
  set guioptions=egmrt              "hide the gui menubar
  "set noantialias                  "turn off antialiasing - it makes things look really blurry.
  set guifont=Fira\ Mono\ Medium\ for\ Powerline:h12,Monaco:h12 "set fonts for gui vim
endif

" Neovim color support
if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

" Make jk behave like you'd expect with wrapped lines
nnoremap j gj
nnoremap k gk

" indentLine configuration
let g:indentLine_color_term = 239
"let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_color_gui = '#333333'
let g:indentLine_char = '│'

" Customize the rainbow_parens to remove black since I use a black background
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

" Highlight extra space at the end of lines, etc...
"highlight RedundantWhitespace ctermbg=red guibg=darkred
"match RedundantWhitespace /\s\+$\|\t/

" Quick buffer switching with TAB, even with edited files
set hidden                          "Let me switch buffers even with modifications
nmap <C-TAB> :bn<CR>
nmap <C-S-TAB> :bp<CR>
set autoread                        "auto-reload files, if there's no conflict

"Don't echo buffer names into the command area - it eats other helpful stuff.
let g:bufferline_echo = 0

" Indentation Stuff
set expandtab                       "use spaces, not tabs
set softtabstop=2 shiftwidth=2      "2-space indents
set shiftround                      "always use a multiple of 4 for indents
set smarttab                        "backspace to remove space-indents
set autoindent                      "auto-indent for code blocks
"DONT USE: smartindent              "it does stupid things with comments

"smart indenting by filetype, better than smartindent
filetype on
filetype indent on
filetype plugin on

" UltiSnip bindings
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Airline Configuration
set nocompatible                    " Disable vi-compatibility
set laststatus=2                    " Always show the statusline
set encoding=utf-8                  " Necessary to show Unicode glyphs

let g:airline_powerline_fonts = 1   " Use powerline fonts. I prefer 12pt Fira Mono Medium for Powerline
let g:airline_theme='distinguished'
colorscheme magellan

" Easytag configuration
:set tags=./.tags;
:let g:easytags_dynamic_files = 1

"Vim-Slime Config for tmux
let g:slime_target = "tmux"

" Fish syntax configuration
autocmd FileType fish compiler fish
autocmd FileType fish setlocal textwidth=79

" Restrict closetag to certain filetypes
autocmd FileType html,htmldjango,jinjahtml,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,mako source ~/.vim/bundle/closetag.vim/plugin/closetag.vim

" Don't continue comments on any filetype.  I'll retype the comment character if I need it.
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Enable RainbowParenthesis by default
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" ------------------------------------------------------
"  Some convenient key configs...
" Map . to jump back to where editing started after repeating the last command.
nmap . .`[

" Some Ctrl-P goodness from http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
"map <leader>f :CtrlP %%<cr>
map <leader>b :CtrlPBuffer<cr>
let g:ctrlp_cmd = 'CtrlPMixed'      "search anything (files, buffers, and MRU files)
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_root_markers = ['.git', 'tags']

" Some convenient tabularize mappings
nmap <leader>a= :Tabularize /=<cr>
vmap <leader>a= :Tabularize /=<cr>
nmap <leader>a<bar> :Tabularize /<bar><cr>
vmap <leader>a<bar> :Tabularize /<bar><cr>
nmap <leader>a: :Tabularize /:\zs<cr>
vmap <leader>a: :Tabularize /:\zs<cr>
nmap <leader>a> :Tabularize /=><cr>
vmap <leader>a> :Tabularize /=><cr>

" Magic HTML to JS converters from Single Page Web Apps Book
vmap <silent> ;h :s?^\(\s*\)+ '\([^']\+\)',*\s*$?\1\2?g<CR>
vmap <silent> ;q :s?^\(\s*\)\(.*\)\s*$? \1 + '\2'?<CR>

" Some nice vimux integration
map <leader>vp :VimuxPromptCommand<cr>
map <leader>vl :VimuxRunLastCommand<cr>

" Bring up NERDTree
map <leader>nt :NERDTreeToggle<cr>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" Enable docuwiki syntax for the current buffer
map <leader>dw :set ft=dokuwiki<cr>

" Shortcut for Gstatus
map <leader>gs :Gstatus<cr>

" iTerm2 Touchbar support
autocmd VimEnter * silent !echo -ne "\033]1337;PushKeyLabels\a"
autocmd VimEnter * silent !echo -ne "\033]1337;SetKeyLabel=F1=Git Status\a"
autocmd VimEnter * map <F1> :Gstatus<CR>
autocmd VimLeave * silent !echo -ne "\033]1337;PopKeyLabels\a"

" Setup some commands for formatting HTML and XML
command Txml set ft=xml | execute "%!tidy -q -i -xml"
command Thtml set ft=html | execute "%!tidy -q -i -html"

" clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

" Convenient YouCompleteMe Bindings
"nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>

" ==============================================
" Vim-coc configuration

" Give more space for displaying messages.
set cmdheight=2

" Having a longer updatetime (default is 4000ms) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear / become resolved.
"set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
"if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
"  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
"else
"  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" ==============================================

" Don't fold by default in vim-markdown
let g:vim_markdown_folding_disabled=1

" vim-javascript configuration
let g:javascript_enable_domhtmlcss=1
let g:javascript_fold=1

" vim-syntastic configuration
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_always_populate_loc_list = 1

" vim-jsx configuration
"let g:jsx_ext_required = 0 " Support JSX in JS files, not just JSX files.

" ==============================================
" Load any private configuration
if filereadable(glob("~/.vimrc.private"))
    source ~/.vimrc.private
endif
